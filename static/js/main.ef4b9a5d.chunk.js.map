{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TIMES","formatDateForTimeInput","date","Date","console","log","hours","getHours","minutes","getMinutes","ampm","padZeroes","number","digits","numStr","String","length","formatDateForDateInput","year","getTime","getTimezoneOffset","getUTCFullYear","month","getUTCMonth","day","getUTCDate","Enumerator","props","currentDate","enumerator","id","name","priority","availability","assignedShifts","claimedShifts","filter","block","startDateFormatted","startTime","endDateFormatted","endTime","currentDateFormatted","map","Block","type","modifyTime","deleteTime","Container","className","key","Row","value","placeholder","onChange","e","changeEnumeratorName","target","Col","style","onClick","adjustPriority","deleteEnumerator","EnumeratorCol","blocks","header","addTime","enumeratorId","startOptions","time","selected","endOptions","useState","setWarning","onMouseEnter","valid","onMouseLeave","as","list","PriorityBlocks","currentWindows","undefined","cw","start","end","forEach","minimumTime","minimumTimeIndex","indexOf","maximumTime","maximumTimeIndex","timeRange","slice","times","margin","maxPriority","Math","max","light","timeDifference","border","color","backgroundColor","height","PriorityBlocksAlt","maxScore","minTimeIndex","min","maxTimeIndex","width","ColorDisplay","count","push","renderedBlocks","warning","every","sm","md","App","updateState","stateObj","currentAssignedShiftIntervals","currentAssignedShiftWindows","currentAvailabilityIntervals","currentAvailabilityWindows","currentClaimedShiftIntervals","currentClaimedShiftWindows","enumerators","nextId","types","el","i","j","Number","firstBlock","secondBlock","curAvailTimes","b","Array","from","Set","t","curAssignedTimes","curClaimedTimes","sort","a","valueOf","window","setState","updateCurrentTimeIntervals","cb","state","currentTimeIntervals","JSON","parse","stringify","preserveDateFormat","sortedTimes","dates","uniqueSorted","arr","arrOut","splice","milliseconds","ds","avail","cs","changeDate","dateValue","addEnumerator","newEnumerator","increase","foundEnum","find","adjustment","newName","addAvailability","availIds","setHours","setMinutes","setSeconds","setMilliseconds","enumId","blockId","foundEnumerator","checkValidity","determineOverlapValidity","determineOrderValidity","startOrEnd","newValue","ampmModifier","timeBlock","match","enumKey","enumRows","this","availKey","availabilityRows","win","assignedKey","assignedShiftRows","Navbar","fluid","React","Component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef4b9a5d.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport './stylesheets/bootstrap.css'\nimport {Navbar, Container, Row, Col} from 'react-bootstrap'\n\nconst TIMES = [\n  '8:00 AM', '8:15 AM', '8:30 AM', '8:45 AM',\n  '9:00 AM', '9:15 AM', '9:30 AM', '9:45 AM',\n  '10:00 AM', '10:15 AM', '10:30 AM', '10:45 AM',\n  '11:00 AM', '11:15 AM', '11:30 AM', '11:45 AM',\n  '12:00 PM', '12:15 PM', '12:30 PM', '12:45 PM',\n  '1:00 PM', '1:15 PM', '1:30 PM', '1:45 PM',\n  '2:00 PM', '2:15 PM', '2:30 PM', '2:45 PM',\n  '3:00 PM', '3:15 PM', '3:30 PM', '3:45 PM',\n  '4:00 PM', '4:15 PM', '4:30 PM', '4:45 PM',\n  '5:00 PM', '5:15 PM', '5:30 PM', '5:45 PM',\n  '6:00 PM', '6:15 PM', '6:30 PM', '6:45 PM',\n  '7:00 PM', '7:15 PM', '7:30 PM', '7:45 PM',\n  '8:00 PM', '8:15 PM', '8:30 PM', '8:45 PM',\n  '9:00 PM'\n]\n\nconst AVAILABILITY = \"availability\"\nconst ASSIGNED_SHIFTS = \"assignedShifts\"\nconst CLAIMED_SHIFTS = \"claimedShifts\"\n\nconst START_TIME = \"startTime\"\nconst END_TIME = \"endTime\"\n\nfunction formatDateForTimeInput(date) {\n  if (date===null) return \"\";\n  if (!(date instanceof Date)) {\n    console.log(date);\n  }\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  let ampm = \"AM\"\n\n  if (hours===12) ampm = \"PM\";\n\n  if (hours > 12) {\n    hours = hours-12;\n    ampm = \"PM\";\n  }\n\n  if (minutes < 10) {\n    minutes = `0${minutes}`\n  }\n\n  return `${hours}:${minutes} ${ampm}`;\n}\n\nfunction padZeroes(number, digits) {\n  let numStr = String(number);\n\n  while (numStr.length < digits) {\n    numStr = \"0\" + numStr;\n  }\n  return numStr;\n}\n\nfunction formatDateForDateInput(date) {\n  date = new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000);\n  let year = padZeroes(date.getUTCFullYear(), 4);\n  let month = padZeroes(date.getUTCMonth()+1, 2);\n  let day = padZeroes(date.getUTCDate(), 2);\n\n  return `${year}-${month}-${day}`;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentDate: new Date(),\n      nextId: 1,\n      enumerators: [],\n      currentAvailabilityIntervals: [],\n      currentAssignedShiftIntervals: [],\n      currentClaimedShiftIntervals: [],\n      currentAvailabilityWindows: [],\n      currentAssignedShiftWindows: [],\n      currentClaimedShiftWindows: []\n    }\n  }\n\n\n\n  updateState = (stateObj) => {\n    console.log(stateObj);\n    let {\n      currentAssignedShiftIntervals, currentAssignedShiftWindows, currentAvailabilityIntervals, currentAvailabilityWindows, currentClaimedShiftIntervals, \n      currentClaimedShiftWindows, currentDate,\n      enumerators,\n      nextId,\n    } = stateObj;\n    let types = [AVAILABILITY, ASSIGNED_SHIFTS, CLAIMED_SHIFTS];\n\n\n\n    // test\n    [currentAssignedShiftIntervals, currentAssignedShiftWindows, currentAvailabilityIntervals, currentAvailabilityWindows, currentClaimedShiftIntervals, currentClaimedShiftWindows, currentDate, enumerators].forEach(el => {\n      if (el===undefined) console.log({el}); //this won't work right, whatever\n    });\n\n    // assume that changes are all within stateObj.currentDate\n    [currentAssignedShiftIntervals, currentAssignedShiftWindows, currentAvailabilityIntervals, currentAvailabilityWindows, currentClaimedShiftIntervals, currentClaimedShiftWindows].forEach(el => el = []);\n\n    // set validity to true for all blocks\n    for (let e of enumerators) {\n      for (let type of types) {\n        for (let block of e[type]) {\n          block.valid=true;\n        }\n      }\n    }\n\n    // clear all time intervals and blocks\n\n    \n    // check overlap validity\n    for (let type of types) {\n      for (let e of enumerators) {\n        for (let i in e[type]) {\n          let j = Number(i) + 1;\n          while (j < e[type].length) {\n            let firstBlock = e[type][i];\n            let secondBlock = e[type][j];\n            if (\n              // firstBlock starts in secondBlock\n              (firstBlock.startTime >= secondBlock.startTime && firstBlock.startTime <= secondBlock.endTime) || \n              // firstBlock ends in secondBlock or eclipses it\n              (firstBlock.startTime <= secondBlock.startTime && firstBlock.endTime >= secondBlock.startTime) \n              // double check this test later, this is a modification to the original\n            ) {\n              firstBlock.valid = false;\n              secondBlock.valid = false;\n            }\n            j++;\n          }\n        }\n      }\n    }\n    \n\n\n    // check order validity\n    for (let type of types) {\n      for (let e of enumerators) {\n        for (let block of e[type]) {\n          if (block.valid === true) {\n            if (block.startTime >= block.endTime) block.valid = false;\n          }\n        }\n      }\n    }\n\n\n    // update time intervals\n    // let intervals = [currentAssignedShiftIntervals, currentAvailabilityIntervals, currentClaimedShiftIntervals];\n\n    currentAvailabilityIntervals = [];\n    currentAssignedShiftIntervals = [];\n    currentClaimedShiftIntervals = [];\n\n    for (let e of enumerators) {\n      let curAvailTimes = [];\n      let availWorking = e[AVAILABILITY].filter(b => b.valid === true && formatDateForDateInput(b.startTime) === formatDateForDateInput(currentDate));\n      availWorking.forEach(block => curAvailTimes.push(block.startTime, block.endTime));\n      Array.from(new Set(curAvailTimes)).forEach(t => currentAvailabilityIntervals.push(t));\n\n      let curAssignedTimes = [];\n      let assignedWorking = e[ASSIGNED_SHIFTS].filter(b => b.valid === true && formatDateForDateInput(b.startTime) === formatDateForDateInput(currentDate));\n      assignedWorking.forEach(block => curAssignedTimes.push(block.startTime, block.endTime));\n      Array.from(new Set(curAssignedTimes)).forEach(t => currentAssignedShiftIntervals.push(t));\n\n      let curClaimedTimes = [];\n      let claimedWorking = e[CLAIMED_SHIFTS].filter(b => b.valid === true && formatDateForDateInput(b.startTime) === formatDateForDateInput(currentDate));\n      claimedWorking.forEach(block => curClaimedTimes.push(block.startTime, block.endTime));\n      Array.from(new Set(curClaimedTimes)).forEach(t => currentClaimedShiftIntervals.push(t));\n    }\n\n    currentAvailabilityIntervals = Array.from(new Set(\n      currentAvailabilityIntervals.sort((a,b) => a-b).map(el => el.valueOf())\n    )).map(el => new Date(el));\n\n    currentAssignedShiftIntervals = Array.from(new Set(\n      currentAssignedShiftIntervals.sort((a,b) => a-b).map(el => el.valueOf())\n    )).map(el => new Date(el));\n\n    currentClaimedShiftIntervals = Array.from(new Set(\n      currentClaimedShiftIntervals.sort((a,b) => a-b).map(el => el.valueOf())\n    )).map(el => new Date(el));\n\n\n\n    // update windows\n    // Testing this, when working update other windows\n    // console.log(currentAvailabilityIntervals);\n    currentAvailabilityWindows = [];\n    for (let i in currentAvailabilityIntervals) {\n      if (i < currentAvailabilityIntervals.length-1) {\n        let start = currentAvailabilityIntervals[i];\n        let end = currentAvailabilityIntervals[Number(i)+1];\n\n        let window = {\n          start,\n          end\n        }\n\n        let priority = 0;\n        console.log(priority);\n\n        for (let e of enumerators) {\n          for (let block of e[AVAILABILITY]) {\n            if (block.startTime <= start && block.endTime >= end) {\n              priority += e.priority;\n            }\n          }\n        }\n        window.priority = priority\n        currentAvailabilityWindows.push(window);\n      }\n    }\n\n    currentAssignedShiftWindows = [];\n    for (let i in currentAssignedShiftIntervals) {\n      if (i < currentAssignedShiftIntervals.length-1) {\n        let start = currentAssignedShiftIntervals[i];\n        let end = currentAssignedShiftIntervals[Number(i)+1];\n\n        let window = {\n          start,\n          end\n        }\n\n        let priority = 0;\n\n        for (let e of enumerators) {\n          for (let block of e[ASSIGNED_SHIFTS]) {\n            if (block.startTime <= start && block.endTime >= end) {\n              priority += e.priority;\n            }\n          }\n        }\n        window.priority = priority\n        currentAssignedShiftWindows.push(window);\n      }\n    }\n\n    currentClaimedShiftWindows = [];\n    for (let i in currentClaimedShiftIntervals) {\n      if (i < currentClaimedShiftIntervals.length-1) {\n        let start = currentClaimedShiftIntervals[i];\n        let end = currentClaimedShiftIntervals[Number(i)+1];\n\n        let window = {\n          start,\n          end\n        }\n\n        let priority = 0;\n\n        for (let e of enumerators) {\n          for (let block of e[CLAIMED_SHIFTS]) {\n            if (block.startTime <= start && block.endTime >= end) {\n              priority += e.priority;\n            }\n          }\n        }\n        window.priority = priority\n        currentClaimedShiftWindows.push(window);\n      }\n    }\n\n\n    stateObj = {\n      currentAssignedShiftIntervals, \n      currentAssignedShiftWindows, \n      currentAvailabilityIntervals, \n      currentAvailabilityWindows, \n      currentClaimedShiftIntervals, \n      currentClaimedShiftWindows, \n      currentDate, \n      enumerators,\n      nextId\n    }\n    console.log(stateObj);\n\n    // for (let windows of windowTypes) {\n    //   for (let window of windows) {\n    //     window.start = formatDateForTimeInput(window.start);\n    //     window.end = formatDateForTimeInput(window.end);\n    //   }\n    // }\n\n    // set state\n    this.setState(stateObj);\n\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  updateCurrentTimeIntervals = (type, cb) => {\n    let currentDateFormatted = formatDateForDateInput(this.state.currentDate);\n\n    let currentTimeIntervals = {}; // object to update state with\n    currentTimeIntervals[type] = []; // array in object\n\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n\n    console.log(stateObj);\n\n    let enumerators = this.state.enumerators;\n\n    console.log(\"updateCurrentTimeIntervals\", type);\n    for (let enumerator of enumerators) {\n      let times = enumerator[type];\n      for (let time of times) {\n        console.log(time.startTime, time.endTime, time.valid);\n        if (formatDateForDateInput(time.startTime)===currentDateFormatted && time.valid) {\n          currentTimeIntervals[type].push(time.startTime);\n        }\n        if (formatDateForDateInput(time.endTime)===currentDateFormatted && time.valid) {\n          currentTimeIntervals[type].push(time.endTime);\n        }\n      }\n    }\n\n    currentTimeIntervals[type] = this.sortedTimes(currentTimeIntervals[type])\n\n    let currentWindows = [];\n    console.log(currentTimeIntervals[type])\n\n    for (let i in currentTimeIntervals[type]) {\n      if (i>0) {\n        let window = {priority: 0};\n        window.start = currentTimeIntervals[type][i-1];\n        window.end = currentTimeIntervals[type][i];\n        console.log(window.start, window.end);\n        for (let enumerator of enumerators) {\n          for (let block of enumerator[type]) {\n            if (block.startTime<=window.start && block.endTime>=window.end) {\n              console.log(enumerator.priority);\n              window.priority = window.priority + enumerator.priority;\n            }\n          }\n        }\n        console.log(window);\n        currentWindows.push(window);\n      }\n    }\n\n    console.log(currentWindows);\n\n    // Update state timeIntervals with working copy \n    switch (type){\n      case AVAILABILITY:\n        stateObj.currentAvailabilityIntervals = currentTimeIntervals[type]\n        stateObj.currentAvailabilityWindows = currentWindows;\n        break;\n      case ASSIGNED_SHIFTS:\n        stateObj.currentAssignedShiftIntervals = currentTimeIntervals[type];\n        stateObj.currentAssignedShiftWindows = currentWindows;\n        break;\n      case CLAIMED_SHIFTS:\n        stateObj.currentClaimedShiftIntervals = currentTimeIntervals[type];\n        stateObj.currentClaimedShiftWindows = currentWindows;\n        break;\n    }\n\n    this.setState(stateObj, cb);\n  }\n\n  sortedTimes = (dates) => {\n    // declare outarray\n    let sorted = [];\n\n    // sort times\n    sorted = dates.sort((a,b) => a-b);\n\n    // format times\n    sorted = sorted.map(date => date.getTime());\n\n    // remove duplicates\n    function uniqueSorted(arr) {\n      let arrOut = arr;\n      for (let i in arr) {\n        if (i>0) {\n          if (arr[i] == arr[i-1]) {\n            arrOut.splice(i, 1);\n            arrOut = uniqueSorted(arrOut);\n          }\n        }\n      }\n      return arrOut;\n    }\n\n    sorted = uniqueSorted(sorted);\n\n    // Put back into dates\n    return sorted.map(milliseconds => new Date(milliseconds))\n  }\n\n  preserveDateFormat = (stateObj) => {\n    // mutates object - DON'T USE ON STATE ITSELF\n    if (stateObj.currentDate) {\n      stateObj.currentDate = new Date(stateObj.currentDate)\n    }\n\n    stateObj.currentAvailabilityIntervals = stateObj.currentAvailabilityIntervals.map(ds => {\n      return new Date(ds);\n    })\n    stateObj.currentAssignedShiftIntervals = stateObj.currentAssignedShiftIntervals.map(ds => new Date(ds));\n    stateObj.currentClaimedShiftIntervals = stateObj.currentClaimedShiftIntervals.map(ds => new Date(ds));\n\n    if (stateObj.currentAvailabilityWindows) {\n      for (let window of stateObj.currentAvailabilityWindows) {\n        window.start = new Date(window.start);\n        window.end = new Date(window.end);\n      }\n    }\n    if (stateObj.currentAssignedShiftWindows) {\n      for (let window of stateObj.currentAssignedShiftWindows) {\n        window.start = new Date(window.start);\n        window.end = new Date(window.end);\n      }\n    }\n    if (stateObj.currentClaimedShiftWindows) {\n      for (let window of stateObj.currentClaimedShiftWindows) {\n        window.start = new Date(window.start);\n        window.end = new Date(window.end);\n      }\n    }\n\n    let enumerators = stateObj.enumerators;\n    for (let e of enumerators) {\n      let {availability, assignedShifts, claimedShifts} = e;\n      for (let avail of availability) {\n        if (avail.startTime) avail.startTime = new Date(avail.startTime);\n        if (avail.endTime) avail.endTime = new Date(avail.endTime);\n      }\n      for (let as of assignedShifts) {\n        if (as.startTime) as.startTime = new Date(as.startTime);\n        if (as.endTime) as.endTime = new Date(as.endTime);\n      }\n      for (let cs of claimedShifts) {\n        if (cs.startTime) cs.startTime = new Date(cs.startTime);\n        if (cs.endTime) cs.endTime = new Date(cs.endTime);\n      }\n    }\n    return;\n  }\n\n  changeDate = (e) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    let dateValue = new Date(e.target.value);\n    \n    stateObj.currentDate = new Date(dateValue.getTime() + dateValue.getTimezoneOffset()*60*1000)\n\n    this.updateState(stateObj);\n\n    // this.setState({\n    //   currentDate: new Date(dateValue.getTime() + dateValue.getTimezoneOffset()*60*1000)\n    // }, ()=>{\n    //   this.updateCurrentTimeIntervals(AVAILABILITY, ()=>{\n    //     this.updateCurrentTimeIntervals(ASSIGNED_SHIFTS, ()=>{\n    //       this.updateCurrentTimeIntervals(CLAIMED_SHIFTS);\n    //     });\n    //   });\n    // })\n  }\n\n  addEnumerator = () => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    console.log(\"before assignment\", {stateObj});\n\n    let enumerators = stateObj.enumerators;\n    let newEnumerator = {\n      id: stateObj.nextId,\n      name: '',\n      priority: 1,\n      availability: [],\n      assignedShifts: [],\n      claimedShifts: []\n    }\n    stateObj.nextId++;\n    console.log(\"after assignment\", {stateObj});\n    enumerators.push(newEnumerator);\n    // this.setState({\n    //   nextId: this.state.nextId + 1,\n    //   enumerators\n    // })\n    console.log(stateObj);\n    this.updateState(stateObj);\n  }\n\n  deleteEnumerator = (id) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    stateObj.enumerators = stateObj.enumerators.filter((enumerator) => {\n      if (enumerator.id===id) return false;\n      else return true;\n    })\n    // this.setState(stateObj, ()=>{\n    //   this.updateCurrentTimeIntervals(AVAILABILITY);\n    //   this.updateCurrentTimeIntervals(ASSIGNED_SHIFTS);\n    //   this.updateCurrentTimeIntervals(CLAIMED_SHIFTS);\n    // });\n\n    this.updateState(stateObj);\n  }\n\n  adjustPriority = (id, increase) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    \n    let foundEnum = stateObj.enumerators.find(enumerator => enumerator.id===id);\n\n    let adjustment = increase ? 1 : -1;\n\n    foundEnum.priority = foundEnum.priority + adjustment;\n\n    // this.setState(stateObj, ()=>{\n    //   this.updateCurrentTimeIntervals(AVAILABILITY, ()=>{\n    //     this.updateCurrentTimeIntervals(ASSIGNED_SHIFTS,  ()=>{\n    //       this.updateCurrentTimeIntervals(CLAIMED_SHIFTS);\n    //     });\n    //   });\n    // });\n\n\n    // this.setState(stateObj, ()=> {\n    //   this.checkValidity(AVAILABILITY, ()=>{\n    //     this.updateCurrentTimeIntervals(AVAILABILITY, ()=>{\n    //       this.checkValidity(ASSIGNED_SHIFTS, ()=>{\n    //         this.updateCurrentTimeIntervals(ASSIGNED_SHIFTS, ()=>{\n    //           this.checkValidity(CLAIMED_SHIFTS, ()=>{this.updateCurrentTimeIntervals(CLAIMED_SHIFTS)})\n    //         })\n    //       })\n    //     })\n    //   })\n    // });\n    this.updateState(stateObj);\n  }\n\n  changeEnumeratorName = (id, newName) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    let foundEnum = stateObj.enumerators.find(enumerator => enumerator.id===id);\n    foundEnum.name = newName;\n    console.log({stateObj, id, newName})\n    this.setState(stateObj)\n  }\n\n  addAvailability = (id) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    let foundEnum = stateObj.enumerators.find(enumerator => enumerator.id===id);\n    let availIds = foundEnum.availability.map(avail => avail.id);\n    if (availIds.length===0) availIds=[-1]\n    let nextId = Math.max(...availIds)+1;\n    console.log(foundEnum, availIds, nextId);\n    foundEnum.availability.push({\n      id: nextId,\n      startTime: this.state.currentDate,\n      endTime: this.state.currentDate\n    })\n    // this.setState(stateObj);\n    this.updateState(stateObj);\n  }\n\n  addTime = (id, type) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    let foundEnum = stateObj.enumerators.find(enumerator => enumerator.id===id);\n    let availIds = foundEnum[type].map(block => block.id);\n    if (availIds.length===0) availIds=[-1]\n    let nextId = Math.max(...availIds)+1;\n\n    let startTime = new Date(this.state.currentDate)\n    startTime.setHours(8)\n    startTime.setMinutes(0)\n    startTime.setSeconds(0)\n    startTime.setMilliseconds(0);\n\n    let endTime = new Date(this.state.currentDate)\n    endTime.setHours(8)\n    endTime.setMinutes(0)\n    endTime.setSeconds(0)\n    endTime.setMilliseconds(0); \n\n    foundEnum[type].push({\n      id: nextId,\n      startTime,\n      endTime,\n      valid: false\n    })\n    // this.setState(stateObj, ()=> {\n    //   this.updateCurrentTimeIntervals(type, ()=>{\n    //     this.checkValidity(type)\n    //   });\n    // });\n\n\n    // this.setState(stateObj, ()=> {\n    //   this.checkValidity(type, ()=>{this.updateCurrentTimeIntervals(type)})\n    // })\n    this.updateState(stateObj);\n  }\n\n  deleteTime = (type, enumId, blockId) => {\n\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    let enumerators = stateObj.enumerators;\n\n    let foundEnumerator = enumerators.find((enumerator) => enumerator.id===enumId);\n\n    // foundEnumerator[type].forEach(block => {\n    //   console.log(block.id, blockId, block.id===blockId)\n    // })\n\n    // console.log(foundEnumerator[type].filter(block => {\n    //   if (block.id === blockId) return false;\n    //   else return true;\n    // }))\n\n    foundEnumerator[type] = foundEnumerator[type].filter(block => {\n      if (block.id === blockId) return false;\n      else return true;\n    })\n\n    // console.log(foundEnumerator[type])\n    // console.log(enumerators);\n    \n    // this.setState({enumerators}, ()=>{\n    //   this.updateCurrentTimeIntervals(type, ()=>{\n    //     this.checkValidity(type)\n    //   });\n    // });\n    // this.setState(stateObj, ()=> {\n    //   this.checkValidity(type, ()=>{this.updateCurrentTimeIntervals(type)})\n    // })\n\n    this.updateState(stateObj);\n  }\n\n\n  // deleteAvailability = (enumId, availId) => {\n  //   let enumerators = JSON.parse(JSON.stringify(this.state.enumerators))\n  //   let foundEnumerator = enumerators.find((enumerator) => enumerator.id===enumId)\n\n  //   foundEnumerator.availability = foundEnumerator.availability.filter((avail) => {\n  //     if (avail.id === availId) return false;\n  //     else return true;\n  //   })\n\n  //   this.preserveDateFormat({enumerators});\n\n  //   this.setState({\n  //     enumerators: enumerators\n  //   }, this.checkValidity)\n  // }\n\n\n  checkValidity = (type, cb) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    if (type) {\n      this.determineOverlapValidity(stateObj, type);\n      this.determineOrderValidity(stateObj, type);\n    } else {\n      this.determineOverlapValidity(stateObj, AVAILABILITY);\n      this.determineOverlapValidity(stateObj, ASSIGNED_SHIFTS);\n      this.determineOverlapValidity(stateObj, CLAIMED_SHIFTS);\n      this.determineOrderValidity(stateObj, AVAILABILITY);\n      this.determineOrderValidity(stateObj, ASSIGNED_SHIFTS);\n      this.determineOrderValidity(stateObj, CLAIMED_SHIFTS);\n    }\n    this.setState(stateObj, cb);\n  }\n\n\n  determineOverlapValidity = (stateObj, type) => {\n\n    // reset all blocks' validity to true\n    for (let enumerator of stateObj.enumerators) {\n      for (let block of enumerator[type]) { \n        block.valid = true;\n      }\n    }\n\n    // mutates stateObj, don't use on state directly\n    for (let enumerator of stateObj.enumerators) {\n      for (let block of enumerator[type]) {\n        for (let secondBlock of enumerator[type]) {\n          if (block.id === secondBlock.id) continue;\n          else {\n            if (\n              // starts in other block\n              (block.startTime >= secondBlock.startTime && block.startTime <= secondBlock.endTime) || \n              // ends in other block\n              (block.endTime >= secondBlock.startTime && block.endTime <= secondBlock.endTime) || \n              // eclipses other block\n              (block.startTime <= secondBlock.startTime && block.endTime >= secondBlock.endTime)\n            ) {\n              block.valid = false;\n              secondBlock.valid = false;\n            }\n          }\n        }\n      }\n    }\n  }\n\n\n  determineOrderValidity = (stateObj, type) => {\n    // only set false\n    for (let enumerator of stateObj.enumerators) {\n      for (let block of enumerator[type]) {\n        if (block.valid) {\n          if (block.startTime >= block.endTime) block.valid = false;\n        }\n      }\n    }\n  }\n\n\n  modifyTime = (type, startOrEnd, enumId, blockId, newValue) => {\n    console.log({\n      type, startOrEnd, enumId, blockId, newValue\n    })\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n\n    let foundEnum = stateObj.enumerators.find(enumerator => enumerator.id===enumId);\n    let timeBlock = foundEnum[type].find((t) => t.id===blockId);\n\n    timeBlock[startOrEnd] = new Date(stateObj.currentDate);\n\n    let ampmModifier;\n    newValue.match(\"AM\") ? ampmModifier = 0 : ampmModifier = 12;\n\n    let hours = Number(newValue.slice(0, newValue.indexOf(\":\")));\n\n    if (hours === 12) {\n      hours = 0;\n    }\n\n    hours = hours + ampmModifier;\n\n    let minutes = Number(newValue.slice(newValue.indexOf(\":\")+1, newValue.indexOf(\" \")));\n\n    timeBlock[startOrEnd].setHours(hours, minutes, 0, 0);\n\n    // determine validity due to order\n    // if (timeBlock.startTime >= timeBlock.endTime) timeBlock.valid = false;\n    // else timeBlock.valid = true;\n\n    // determine validity due to overlap\n\n    // determine validity due to order of start and end time\n    // if (timeBlock.startTime >= timeBlock.endTime) timeBlock.valid=false;\n\n    // this.setState(stateObj, ()=> {\n    //   this.updateCurrentTimeIntervals(type, this.checkValidity);\n    // });\n\n    // this.setState(stateObj, ()=>{\n    //   this.checkValidity(null, ()=>{\n    //     this.updateCurrentTimeIntervals(type);\n    //   })\n    // })\n    this.updateState(stateObj);\n  \n  }\n\n\n  render() {\n    let enumKey=0;\n    let enumRows = this.state.enumerators.map((e) => {\n      enumKey++;\n      return (\n        <Enumerator \n          key={`enumerator-${enumKey}`}\n          enumerator={e} \n          currentDate={this.state.currentDate}\n\n          adjustPriority={this.adjustPriority}\n\n          deleteEnumerator={this.deleteEnumerator}\n          changeEnumeratorName={this.changeEnumeratorName}\n\n          // addAvailability={this.addAvailability}\n          // deleteAvailability={this.deleteAvailability}\n          deleteTime={this.deleteTime}\n          modifyTime={this.modifyTime}\n          addTime={this.addTime}\n        />\n      )\n    })\n    let availKey=0;\n    let availabilityRows = this.state.currentAvailabilityWindows?.length > 0 ? this.state.currentAvailabilityWindows?.map(win => {\n      availKey++;\n      return(\n        <Row key={`availability-row-${availKey}`}>\n          <Col>\n            {formatDateForTimeInput(new Date(win.start))} - {formatDateForTimeInput(new Date(win.end))}\n          </Col>\n          <Col>\n            {win.priority}\n          </Col>\n        </Row>\n      )\n    }) : [\n      <Row key=\"availability-row-1\">\n        <Col>\n          — - —\n        </Col>\n        <Col>\n          —\n        </Col>\n      </Row>\n    ]\n    let assignedKey = 0;\n    let assignedShiftRows = this.state.currentAssignedShiftWindows?.length > 0 ? this.state.currentAssignedShiftWindows?.map(win => {\n      console.log(win);\n      assignedKey++;\n      return(\n        <Row key={`assigned-row-${assignedKey}`}>\n          <Col>\n            {formatDateForTimeInput(win.start)} - {formatDateForTimeInput(win.end)}\n          </Col>\n          <Col>\n            {win.priority}\n          </Col>\n        </Row>\n      )\n    }) : [\n      <Row key={`assigned-row-${assignedKey}`}>\n        <Col>\n          — - —\n        </Col>\n        <Col>\n          —\n        </Col>\n      </Row>\n    ]\n\n    return (\n      <div className=\"App\">\n        <Navbar className=\"nav\">\n          <div className=\"mx-auto\">\n            Enumerator Time Viewer    \n          </div>\n        </Navbar>\n        <Container fluid className=\"enumerator-master-container\">\n          <datalist id=\"times\">\n            <option value=\"9:00 AM\" />\n            <option value=\"9:15 AM\" />\n            <option value=\"9:30 AM\" />\n            <option value=\"9:45 AM\" />\n            <option value=\"10:00 AM\" />\n            <option value=\"10:15 AM\" />\n            <option value=\"10:30 AM\" />\n            <option value=\"10:45 AM\" />\n            <option value=\"11:00 AM\" />\n            <option value=\"11:15 AM\" />\n            <option value=\"11:30 AM\" />\n            <option value=\"11:45 AM\" />\n            <option value=\"12:00 PM\" />\n            <option value=\"12:15 PM\" />\n            <option value=\"12:30 PM\" />\n            <option value=\"12:45 PM\" />\n            <option value=\"1:00 PM\" />\n            <option value=\"1:15 PM\" />\n            <option value=\"1:30 PM\" />\n            <option value=\"1:45 PM\" />\n            <option value=\"2:00 PM\" />\n            <option value=\"2:15 PM\" />\n            <option value=\"2:30 PM\" />\n            <option value=\"2:45 PM\" />\n            <option value=\"3:00 PM\" />\n            <option value=\"3:15 PM\" />\n            <option value=\"3:30 PM\" />\n            <option value=\"3:45 PM\" />\n            <option value=\"4:00 PM\" />\n            <option value=\"4:15 PM\" />\n            <option value=\"4:30 PM\" />\n            <option value=\"4:45 PM\" />\n            <option value=\"5:00 PM\" />\n            <option value=\"5:15 PM\" />\n            <option value=\"5:30 PM\" />\n            <option value=\"5:45 PM\" />\n            <option value=\"6:00 PM\" />\n            <option value=\"6:15 PM\" />\n            <option value=\"6:30 PM\" />\n            <option value=\"6:45 PM\" />\n            <option value=\"6:00 PM\" />\n            <option value=\"7:15 PM\" />\n            <option value=\"7:30 PM\" />\n            <option value=\"7:45 PM\" />\n            <option value=\"7:00 PM\" />\n            <option value=\"8:15 PM\" />\n            <option value=\"8:30 PM\" />\n            <option value=\"8:45 PM\" />\n            <option value=\"9:00 PM\" />\n          </datalist>\n          <Row className=\"justify-content-center p-2\">\n            <h5>\n              Select Date:\n            </h5>\n          </Row>\n          <Row className=\"justify-content-center p-2\">\n            <input \n              type=\"date\" \n              value={formatDateForDateInput(this.state.currentDate)} \n              onChange={this.changeDate} \n            />\n          </Row>\n          <Row className=\"justify-content-center p-4\">\n            <button onClick={this.addEnumerator}>\n              Add Enumerator\n            </button>\n          </Row>\n          {enumRows}\n          <Container className=\"optimizer text-center\">\n            <Row>\n              <Col sm={6}>\n                <Row className=\"optimizer-header justify-content-center\">\n                  <h4>Availability</h4>\n                </Row>\n                <Row>\n                  <Col>\n                    <h5>Time</h5>\n                  </Col>\n                  <Col>\n                    <h5>Priority</h5>\n                  </Col>\n                </Row>\n                {availabilityRows}\n              </Col>\n              <Col sm={6}>\n                <Row className=\"justify-content-center\">\n                  <h4 className=\"optimizer-header\">Assigned Shifts</h4>\n                </Row>\n                <Row>\n                  <Col>\n                    <h5>Time</h5>\n                  </Col>\n                  <Col>\n                    <h5>Priority</h5>\n                  </Col>\n                </Row>\n                {assignedShiftRows}\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                {<PriorityBlocks currentWindows={this.state.currentAvailabilityWindows}/>}\n              </Col>\n              <Col>\n                {<PriorityBlocks currentWindows={this.state.currentAssignedShiftWindows}/>}\n              </Col>\n            </Row>\n            \n            \n          </Container>\n          <Container className=\"experiment-zone\">\n            <PriorityBlocksAlt currentWindows={this.state.currentAvailabilityWindows}/>\n            <ColorDisplay />\n          </Container>\n        </Container>\n      </div>\n    );\n  }\n  \n}\n\nfunction Enumerator(props) {\n\n  let currentDate = props.currentDate;\n\n  let { id, name, priority, availability, assignedShifts, claimedShifts } = props.enumerator;\n\n\n  // let options = (matchTime) => TIMES.map(time => {\n  //   return <option key={time} value={time} />\n  // })\n\n  let currentYear = currentDate.getUTCFullYear();\n  let currentMonth = currentDate.getUTCMonth();\n  let currentDay = currentDate.getUTCDate();\n  \n\n  availability = availability.filter((block) => {\n    let startDateFormatted = formatDateForDateInput(block.startTime);\n    let endDateFormatted = formatDateForDateInput(block.endTime);\n    let currentDateFormatted = formatDateForDateInput(currentDate);\n\n    if (startDateFormatted === endDateFormatted && endDateFormatted === currentDateFormatted) {\n      return true;\n    } else return false;\n  });\n\n  assignedShifts = assignedShifts.filter((block) => {\n    let startDateFormatted = formatDateForDateInput(block.startTime);\n    let endDateFormatted = formatDateForDateInput(block.endTime);\n    let currentDateFormatted = formatDateForDateInput(currentDate);\n\n    if (startDateFormatted === endDateFormatted && endDateFormatted === currentDateFormatted) {\n      return true;\n    } else return false;\n  });\n\n\n  claimedShifts = claimedShifts.filter((block) => {\n    let startDateFormatted = formatDateForDateInput(block.startTime);\n    let endDateFormatted = formatDateForDateInput(block.endTime);\n    let currentDateFormatted = formatDateForDateInput(currentDate);\n\n    if (startDateFormatted === endDateFormatted && endDateFormatted === currentDateFormatted) {\n      return true;\n    } else return false;\n  })\n\n  let renderedClaimedShifts = claimedShifts.map(block => <Block type={CLAIMED_SHIFTS} block={block} modifyTime={props.modifyTime} deleteTime={props.deleteTime} id={id}/>)\n\n  let renderedAssignedShifts = assignedShifts.map(block => <Block type={ASSIGNED_SHIFTS} block={block} modifyTime={props.modifyTime} deleteTime={props.deleteTime} id={id}/>)\n\n  let renderedAvailability = availability.map(block => <Block type={AVAILABILITY} block={block} modifyTime={props.modifyTime} deleteTime={props.deleteTime} id={id}/>)\n  \n  return (\n    <Container className=\"enumerator-container\" key={id} >\n      <Row className=\"enumerator-row enumerator-name-row p-1\">\n        <input \n          value={name}\n          className=\"enumerator-name\"\n          placeholder=\"Enumerator Name\"\n          onChange={(e) => {\n            props.changeEnumeratorName(id, e.target.value)\n          }}\n        />\n        <Col>\n          <span style={{\"marginRight\": \"10px\"}}>\n            Priority:\n          </span>\n          <span \n            className=\"adjust-priority adjust-priority-down\"\n            onClick={()=>{props.adjustPriority(id, false)}}\n          >\n            &#9660;\n          </span>\n            {priority}\n          <span \n            className=\"adjust-priority adjust-priority-up\"\n            onClick={()=>{props.adjustPriority(id, true)}}\n          >\n            &#9650;\n          </span>\n        </Col>\n        <Col>\n          <span \n            className=\"delete-enumerator-icon\"\n            onClick={(e)=>{props.deleteEnumerator(id)}}\n          >\n            &times;\n          </span>\n        </Col>\n      </Row>\n      <Row>\n        <EnumeratorCol \n          blocks={availability} \n          header=\"Availability\" \n          type={AVAILABILITY} \n          addTime={props.addTime} \n          modifyTime={props.modifyTime} \n          deleteTime={props.deleteTime} \n          enumeratorId={id}\n        />\n        {/* <Col className=\"enumerator-col enumerator-availability-col\" sm={6} md={4}>\n          <Row className=\"justify-content-center\">\n            <h6>\n              Availability\n            </h6>\n          </Row>\n          <Row className=\"justify-content-center\">\n            {renderedAvailability}\n          </Row>\n          <Row className=\"justify-content-center\">\n            <button onClick={() => {\n              console.log(id);\n              props.addTime(id, AVAILABILITY);\n            }}>\n              Add Availability\n            </button>\n          </Row>\n        </Col> */}\n        <EnumeratorCol \n          blocks={assignedShifts} \n          header=\"Assigned Shifts\" \n          type={ASSIGNED_SHIFTS} \n          addTime={props.addTime} \n          modifyTime={props.modifyTime} \n          deleteTime={props.deleteTime} \n          enumeratorId={id}\n        />\n        {/* <Col className=\"enumerator-col enumerator-assigned-shift-col\" sm={6} md={4}>\n          <Row className=\"justify-content-center\">\n            <h6>\n              Assigned Shifts\n            </h6>\n          </Row>\n          <Row className=\"justify-content-center\">\n            {renderedAssignedShifts}\n          </Row>\n          <Row className=\"justify-content-center\">\n            <button onClick={()=>{\n              props.addTime(id, ASSIGNED_SHIFTS);\n            }}>\n              Add Assigned Shift\n            </button>\n          </Row>\n        </Col> */}\n        <EnumeratorCol \n          blocks={claimedShifts} \n          header=\"Claimed Shifts\" \n          type={CLAIMED_SHIFTS} \n          addTime={props.addTime} \n          modifyTime={props.modifyTime} \n          deleteTime={props.deleteTime} \n          enumeratorId={id}\n        />\n        {/* <Col className=\"enumerator-col enumerator-claimed-time-col\" sm={6} md={4}>\n          <Row className=\"justify-content-center\">\n            <h6>\n              Claimed Shifts\n            </h6>\n          </Row>\n          <Row className=\"justify-content-center\">\n            {renderedClaimedShifts}\n          </Row>\n          <Row className=\"justify-content-center\">\n            <button onClick={()=>{\n              props.addTime(id, CLAIMED_SHIFTS)\n            }}>\n              Add Claimed Shift\n            </button>\n          </Row>\n        </Col> */}\n      </Row>  \n    </Container>\n  )\n}\n\n// function renderBlocks(showWarning, hideWarning, type, blockSection, modifyTime, deleteTime, id) {\n\n//   let rendered = blockSection.map((block) => {\n//     // console.log(block);\n//     let startOptions = TIMES.map(time => {\n//       let selected = false;\n//       if (formatDateForTimeInput(block.startTime) == time) {\n//         selected = true;\n//       }\n//       return <option key={time} value={time} selected={selected}>{time}</option>\n//     })\n\n//     let endOptions = TIMES.map(time => {\n//       let selected = false;\n//       if (formatDateForTimeInput(block.endTime) == time) {\n//         selected = true;\n//       }\n//       return <option key={time} value={time} selected={selected}>{time}</option>\n//     })\n\n//     // console.log(block.startTime, block.endTime, block.valid);\n\n//     var [warning, setWarning] = useState(false);\n\n//     // OVERRIDE\n//     showWarning = (e) => {\n//       if (!block.valid) setWarning(true);\n//       if (warning) console.log(warning);\n//     }\n\n//     hideWarning = (e) => {\n//       setWarning(false);\n//     }\n\n\n//     return (\n//       <Row \n//         key={block.id} \n//         className=\"rendered-time-block d-flex\"\n//         onMouseEnter={(e)=>{showWarning(e)}}\n//         // onMouseLeave={hideWarning}\n//       >\n//         <select\n//           list=\"times\"\n//           key={`availability-${block.id}-start`}\n//           className={`time-input m-2 ${block.valid ? \"\" : \"time-input-invalid\"}`}\n//           onChange={(e) => {\n//             modifyTime(type, START_TIME, id, block.id, e.target.value)\n//           }}\n//         >\n//           {startOptions}\n//         </select>\n//           to\n//         <select\n//           list=\"times\"\n//           key={`availability-${block.id}-end`}\n//           className={`time-input m-2 ${block.valid ? \"\" : \"time-input-invalid\"}`}\n//           onChange={(e)=>{\n//             modifyTime(type, END_TIME, id, block.id, e.target.value)\n//           }}\n//         >\n//           {endOptions}\n//         </select>\n//         <button\n//           className=\"close m-1\"\n//           onClick={()=>{deleteTime(type, id, block.id)}}\n//         >\n//           &times;\n//         </button>\n//         {warning ? (\n//           <Col className=\"warning\">\n//             Make sure that the end time is later than the start time, and that this time window does not overlap any other windows.\n//           </Col>\n//         ) : \"\"}\n//       </Row>\n//     )\n//   })\n\n//   return rendered;\n// }\n\n// function Warning() {\n//   return (\n//     <div>\n//       Make sure that the end time is later than the start time, and that this time window does not overlap any other windows.\n//     </div>\n//   )\n// }\n\n\nfunction Block(props) {\n  let {type, block, modifyTime, deleteTime, id} = props;\n  let startOptions = TIMES.map(time => {\n    let selected = false;\n    if (formatDateForTimeInput(block.startTime) == time) {\n      selected = true;\n    }\n    return <option key={time} value={time} selected={selected}>{time}</option>\n  })\n\n  let endOptions = TIMES.map(time => {\n    let selected = false;\n    if (formatDateForTimeInput(block.endTime) == time) {\n      selected = true;\n    }\n    return <option key={time} value={time} selected={selected}>{time}</option>\n  })\n\n  const [warning, setWarning] = useState(false);\n\n  return (\n    <Container key={block.id} \n      className=\"rendered-time-block\"\n      onMouseEnter={(e)=>{if(!block.valid) setWarning(true);}}\n      onMouseLeave={(e)=>{setWarning(false);}}\n    >\n      <Row className=\"time-block-row justify-content-center\">\n        <select\n          as=\"Col\"\n          list=\"times\"\n          key={`availability-${block.id}-start`}\n          className={`time-input m-2 ${block.valid ? \"\" : \"time-input-invalid\"}`}\n          onChange={(e) => {\n            modifyTime(type, START_TIME, id, block.id, e.target.value)\n          }}\n        >\n          {startOptions}\n        </select>\n        <div className=\"time-block-to-div\">\n          to\n        </div>\n        <select\n          as=\"Col\"\n          list=\"times\"\n          key={`availability-${block.id}-end`}\n          className={`time-input m-2 ${block.valid ? \"\" : \"time-input-invalid\"}`}\n          onChange={(e)=>{\n            modifyTime(type, END_TIME, id, block.id, e.target.value)\n          }}\n        >\n          {endOptions}\n        </select>\n        <button\n          as=\"Col\"\n          className=\"close m-1\"\n          onClick={()=>{deleteTime(type, id, block.id)}}\n        >\n          &times;\n        </button>\n      </Row>\n      {/* {warning ? (\n        <Row className=\"warning xs-12\">\n          <span className=\"warning-span\">\n            Make sure that the end time is later than the start time, and that this time window does not overlap any other windows.\n          </span>\n        </Row>) : \"\"\n      } */}\n    </Container>\n  )\n}\n\nfunction PriorityBlocks(props) {\n  let {currentWindows} = props;\n\n  console.log(props);\n\n  if (currentWindows===undefined || currentWindows.length===0) {\n    // console.log(\"currentWindows no good\");\n    // console.log(currentWindows);\n    return null;\n  } else {\n    for (let cw of currentWindows){\n      // console.log(cw.start, cw.start instanceof Date);\n      if (!cw.start instanceof Date) {\n        console.log(\"caught\");\n        return null;\n      }\n\n      // console.log(cw.end, cw.end instanceof Date);\n      if (!cw.end instanceof Date) {\n        console.log(\"caught\");\n        return null;\n      }\n    }\n\n    // console.log(\"should be good\", currentWindows);\n\n    currentWindows.forEach(cw => {\n      cw.start = formatDateForTimeInput(new Date(cw.start));\n      cw.end = formatDateForTimeInput(new Date(cw.end));\n    })\n\n    // console.log(currentWindows);\n\n    // windows are already sorted by start time\n    let minimumTime = currentWindows[0].start;\n    let minimumTimeIndex = TIMES.indexOf(minimumTime);\n    let maximumTime = currentWindows[currentWindows.length-1].end;\n    let maximumTimeIndex = TIMES.indexOf(maximumTime);\n\n    let timeRange = TIMES.slice(minimumTimeIndex, maximumTimeIndex-minimumTimeIndex+1);\n\n    let times = timeRange.map(time => <p style={{margin: 0}}>{time}</p>)\n\n    let maxPriority = Math.max(...currentWindows.map(cw => cw.priority));\n\n    \n\n    let blocks = currentWindows.map(cw => {\n      // hsla(179, 100%, range(85-15), 1)\n      let light = 85-(cw.priority/(maxPriority)*70);\n      // console.log(cw.priority);\n      // console.log(maxPriority);\n      // console.log(light);\n      // console.log(`hsla(179, 100%, ${light}%, 1)`)\n\n      let timeDifference = timeRange.indexOf(cw.end) - timeRange.indexOf(cw.start);\n\n      return <div style={{\n        border: \"1px solid black\",\n        color: \"black\",\n        backgroundColor: `hsla(179, 100%, ${light}%, 1)`,\n        height: `${timeDifference*23.636}px`\n      }}>{cw.priority}</div>\n    })\n\n    return (\n      <Container>\n        <Row>\n          <Col>\n            {times}\n          </Col>\n          <Col>\n            {blocks}\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\n\nfunction PriorityBlocksAlt(props) {\n  console.log(props.currentWindows);\n  let maxScore = Math.max(...props.currentWindows.map(cw => cw.priority))\n  let minTimeIndex = Math.min(...props.currentWindows.map(cw => TIMES.indexOf(cw.start)));\n  let maxTimeIndex = Math.max(...props.currentWindows.map(cw => TIMES.indexOf(cw.end)));\n  // props.currentWindows : start, end, priority\n\n  let blocks = props.currentWindows.map(cw => {\n    return (\n      <div style={{\n        height: '45px',\n        backgroundColor: `hsla(${179+(cw.priority/maxScore)*181}, 100%, 55%, 1)`,\n        width: `${(TIMES.indexOf(cw.end)-TIMES.indexOf(cw.start)) * 100 / (maxTimeIndex-minTimeIndex)}%`\n      }}\n      ></div>\n    )\n  })\n\n\n  return (\n    <Row>\n      {blocks}\n    </Row>\n  )\n}\n\n\nfunction ColorDisplay(props) {\n  const BLOCK_COUNT = 15;\n  let count = 0;\n  let blocks = [];\n  while (count < BLOCK_COUNT) {\n    let style = {\n      width: `${100/BLOCK_COUNT}%`,\n      height: '15px',\n      backgroundColor: `hsla(${179+(count/BLOCK_COUNT)*181}, 100%, 55%, 1)`\n    }\n\n    blocks.push(<div style={style}></div>)\n    count++;\n  }\n  return (\n    <Row>\n      {blocks}\n    </Row>\n  )\n}\n\n\nfunction EnumeratorCol(props) {\n  // props: blocks, header, type, addTime, modifyTime, deleteTime, enumeratorId\n  let renderedBlocks = props.blocks.map(block => <Block type={props.type} block={block} modifyTime={props.modifyTime} deleteTime={props.deleteTime} id={props.enumeratorId}>\n  </Block>)\n\n  console.log(props);\n  let warning = null;\n\n  if (!props.blocks.every(block => block.valid)) {\n    warning = <Row className=\"warning xs-12\">\n      <span className=\"warning-span\">\n        Make sure that the end time is later than the start time, and that this time window does not overlap any other windows.\n      </span>\n    </Row>\n  }\n\n  return (\n    <Col className=\"enumerator-col enumeartor-availability-col\" sm={6} md={4}>\n      <Row className=\"justify-content-center\">\n        <h6>\n          {props.header}\n        </h6>\n      </Row>\n      <Row className=\"justify-content-center\">\n        {renderedBlocks}\n      </Row>\n      {warning}\n      <Row className=\"justify-content-center\">\n        <button onClick={() => {\n          console.log(props.enumeratorId);\n          props.addTime(props.enumeratorId, props.type);\n        }}>\n          Add {props.header[props.header.length-1] === \"s\" ? props.header.slice(0, props.header.length-1) : props.header}\n        </button>\n      </Row>\n    </Col>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}