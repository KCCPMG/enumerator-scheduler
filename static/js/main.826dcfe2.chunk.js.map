{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TIMES","formatDateForTimeInput","date","Date","console","log","hours","getHours","minutes","getMinutes","ampm","padZeroes","number","digits","numStr","String","length","formatDateForDateInput","year","getTime","getTimezoneOffset","getUTCFullYear","month","getUTCMonth","day","getUTCDate","App","props","setShowModal","setState","showModal","state","updateState","stateObj","currentAssignedShiftIntervals","currentAssignedShiftWindows","currentAvailabilityIntervals","currentAvailabilityWindows","currentClaimedShiftIntervals","currentClaimedShiftWindows","currentDate","enumerators","nextId","types","forEach","el","e","type","valid","i","j","Number","firstBlock","secondBlock","startTime","endTime","block","curAvailTimes","filter","b","push","Array","from","Set","t","curAssignedTimes","curClaimedTimes","sort","a","map","valueOf","start","end","window","priority","updateCurrentTimeIntervals","cb","currentDateFormatted","currentTimeIntervals","JSON","parse","stringify","preserveDateFormat","times","time","sortedTimes","currentWindows","enumerator","dates","uniqueSorted","arr","arrOut","splice","milliseconds","ds","availability","assignedShifts","claimedShifts","avail","as","cs","changeDate","dateValue","target","value","addEnumerator","newEnumerator","id","name","deleteEnumerator","adjustPriority","increase","foundEnum","find","adjustment","Math","min","max","changeEnumeratorName","newName","addAvailability","availIds","addTime","setHours","setMinutes","setSeconds","setMilliseconds","deleteTime","enumId","blockId","foundEnumerator","checkValidity","determineOverlapValidity","determineOrderValidity","modifyTime","startOrEnd","newValue","ampmModifier","timeBlock","match","slice","indexOf","enumKey","enumRows","this","Enumerator","key","availKey","assignedKey","win","Row","Col","className","Modal","show","onHide","Header","closeButton","Title","Body","Footer","onClick","Navbar","Container","fluid","onChange","React","Component","startDateFormatted","endDateFormatted","Block","placeholder","style","EnumeratorCol","blocks","header","enumeratorId","startOptions","selected","endOptions","useState","setWarning","onMouseEnter","onMouseLeave","list","PriorityBlocks","detail","maxScore","cw","minTimeIndex","maxTimeIndex","GRAY","LIGHTBLUE","compColor","height","width","backgroundColor","renderedBlocks","warning","every","sm","md","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.826dcfe2.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport './stylesheets/bootstrap.css'\nimport {Navbar, Container, Row, Col, Modal} from 'react-bootstrap'\n\nconst TIMES = [\n  '8:00 AM', '8:15 AM', '8:30 AM', '8:45 AM',\n  '9:00 AM', '9:15 AM', '9:30 AM', '9:45 AM',\n  '10:00 AM', '10:15 AM', '10:30 AM', '10:45 AM',\n  '11:00 AM', '11:15 AM', '11:30 AM', '11:45 AM',\n  '12:00 PM', '12:15 PM', '12:30 PM', '12:45 PM',\n  '1:00 PM', '1:15 PM', '1:30 PM', '1:45 PM',\n  '2:00 PM', '2:15 PM', '2:30 PM', '2:45 PM',\n  '3:00 PM', '3:15 PM', '3:30 PM', '3:45 PM',\n  '4:00 PM', '4:15 PM', '4:30 PM', '4:45 PM',\n  '5:00 PM', '5:15 PM', '5:30 PM', '5:45 PM',\n  '6:00 PM', '6:15 PM', '6:30 PM', '6:45 PM',\n  '7:00 PM', '7:15 PM', '7:30 PM', '7:45 PM',\n  '8:00 PM', '8:15 PM', '8:30 PM', '8:45 PM',\n  '9:00 PM'\n]\n\nconst AVAILABILITY = \"availability\"\nconst ASSIGNED_SHIFTS = \"assignedShifts\"\nconst CLAIMED_SHIFTS = \"claimedShifts\"\n\nconst START_TIME = \"startTime\"\nconst END_TIME = \"endTime\"\n\nfunction formatDateForTimeInput(date) {\n  if (date===null) return \"\";\n  if (!(date instanceof Date)) {\n    console.log(date);\n  }\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  let ampm = \"AM\"\n\n  if (hours===12) ampm = \"PM\";\n\n  if (hours > 12) {\n    hours = hours-12;\n    ampm = \"PM\";\n  }\n\n  if (minutes < 10) {\n    minutes = `0${minutes}`\n  }\n\n  return `${hours}:${minutes} ${ampm}`;\n}\n\nfunction padZeroes(number, digits) {\n  let numStr = String(number);\n\n  while (numStr.length < digits) {\n    numStr = \"0\" + numStr;\n  }\n  return numStr;\n}\n\nfunction formatDateForDateInput(date) {\n  date = new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000);\n  let year = padZeroes(date.getUTCFullYear(), 4);\n  let month = padZeroes(date.getUTCMonth()+1, 2);\n  let day = padZeroes(date.getUTCDate(), 2);\n\n  return `${year}-${month}-${day}`;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showModal: false,\n      currentDate: new Date(),\n      nextId: 1,\n      enumerators: [],\n      currentAvailabilityIntervals: [],\n      currentAssignedShiftIntervals: [],\n      currentClaimedShiftIntervals: [],\n      currentAvailabilityWindows: [],\n      currentAssignedShiftWindows: [],\n      currentClaimedShiftWindows: []\n    }\n  }\n\n  // Testing \n  // componentDidMount = () => {\n    \n  //   console.log('mounted');\n    \n  //   this.addEnumerator()\n  //   .then(()=>{\n  //     return this.changeEnumeratorName(1, \"Pierre\")\n  //   })\n  //   .then(() => {\n  //     return this.adjustPriority(1, 1)\n  //   })\n  //   .then(this.addEnumerator)\n  //   .then(()=> this.changeEnumeratorName(2, \"Lindsay\"))\n  //   .then(() => this.addTime(1, AVAILABILITY))\n  //   .then(() => this.addTime(1, ASSIGNED_SHIFTS))\n  //   .then(() => this.addTime(1, AVAILABILITY))\n  //   .then(() => this.addTime(2, AVAILABILITY))\n  //   .then(() => this.addTime(2, ASSIGNED_SHIFTS))\n  //   .then(() => this.modifyTime(AVAILABILITY, START_TIME, 1, 0, \"12:00 PM\"))\n  //   .then(() => this.modifyTime(AVAILABILITY, END_TIME, 1, 0, \"2:00 PM\"))\n  //   .then(() => this.modifyTime(AVAILABILITY, START_TIME, 2, 0, \"11:00 AM\"))\n  //   .then(() => this.modifyTime(AVAILABILITY, END_TIME, 2, 0, \"5:00 PM\"))\n  //   .then(() => this.modifyTime(AVAILABILITY, START_TIME, 1, 1, \"3:00 PM\"))\n  //   .then(() => this.modifyTime(AVAILABILITY, END_TIME, 1, 1, \"6:00 PM\"))\n  //   .then(() => this.modifyTime(ASSIGNED_SHIFTS, START_TIME, 1, 0, \"12:00 PM\"))\n  //   .then(() => this.modifyTime(ASSIGNED_SHIFTS, END_TIME, 1, 0, \"2:00 PM\"))\n  //   .then(() => this.modifyTime(ASSIGNED_SHIFTS, START_TIME, 2, 0, \"11:00 AM\"))\n  //   .then(() => this.modifyTime(ASSIGNED_SHIFTS, END_TIME, 2, 0, \"4:00 PM\"))\n\n\n  // }\n\n  setShowModal = ()=> {\n    this.setState({\n      showModal: !this.state.showModal\n    })\n  }\n\n  updateState = (stateObj) => {\n    console.log(stateObj);\n    let {\n      currentAssignedShiftIntervals, currentAssignedShiftWindows, currentAvailabilityIntervals, currentAvailabilityWindows, currentClaimedShiftIntervals, \n      currentClaimedShiftWindows, currentDate,\n      enumerators,\n      nextId,\n    } = stateObj;\n    let types = [AVAILABILITY, ASSIGNED_SHIFTS, CLAIMED_SHIFTS];\n\n\n    // assume that changes are all within stateObj.currentDate\n    [currentAssignedShiftIntervals, currentAssignedShiftWindows, currentAvailabilityIntervals, currentAvailabilityWindows, currentClaimedShiftIntervals, currentClaimedShiftWindows].forEach(el => el = []);\n\n    // set validity to true for all blocks\n    for (let e of enumerators) {\n      for (let type of types) {\n        for (let block of e[type]) {\n          block.valid=true;\n        }\n      }\n    }\n    \n    // check overlap validity\n    for (let type of types) {\n      for (let e of enumerators) {\n        for (let i in e[type]) {\n          let j = Number(i) + 1;\n          while (j < e[type].length) {\n            let firstBlock = e[type][i];\n            let secondBlock = e[type][j];\n            if (\n              // firstBlock starts in secondBlock\n              (firstBlock.startTime >= secondBlock.startTime && firstBlock.startTime <= secondBlock.endTime) || \n              // firstBlock ends in secondBlock or eclipses it\n              (firstBlock.startTime <= secondBlock.startTime && firstBlock.endTime >= secondBlock.startTime) \n              // double check this test later, this is a modification to the original\n            ) {\n              firstBlock.valid = false;\n              secondBlock.valid = false;\n            }\n            j++;\n          }\n        }\n      }\n    }\n\n    // check order validity\n    for (let type of types) {\n      for (let e of enumerators) {\n        for (let block of e[type]) {\n          if (block.valid === true) {\n            if (block.startTime >= block.endTime) block.valid = false;\n          }\n        }\n      }\n    }\n\n\n    // update time intervals\n\n    currentAvailabilityIntervals = [];\n    currentAssignedShiftIntervals = [];\n    currentClaimedShiftIntervals = [];\n\n    for (let e of enumerators) {\n      let curAvailTimes = [];\n      let availWorking = e[AVAILABILITY].filter(b => b.valid === true && formatDateForDateInput(b.startTime) === formatDateForDateInput(currentDate));\n      availWorking.forEach(block => curAvailTimes.push(block.startTime, block.endTime));\n      Array.from(new Set(curAvailTimes)).forEach(t => currentAvailabilityIntervals.push(t));\n\n      let curAssignedTimes = [];\n      let assignedWorking = e[ASSIGNED_SHIFTS].filter(b => b.valid === true && formatDateForDateInput(b.startTime) === formatDateForDateInput(currentDate));\n      assignedWorking.forEach(block => curAssignedTimes.push(block.startTime, block.endTime));\n      Array.from(new Set(curAssignedTimes)).forEach(t => currentAssignedShiftIntervals.push(t));\n\n      let curClaimedTimes = [];\n      let claimedWorking = e[CLAIMED_SHIFTS].filter(b => b.valid === true && formatDateForDateInput(b.startTime) === formatDateForDateInput(currentDate));\n      claimedWorking.forEach(block => curClaimedTimes.push(block.startTime, block.endTime));\n      Array.from(new Set(curClaimedTimes)).forEach(t => currentClaimedShiftIntervals.push(t));\n    }\n\n    currentAvailabilityIntervals = Array.from(new Set(\n      currentAvailabilityIntervals.sort((a,b) => a-b).map(el => el.valueOf())\n    )).map(el => new Date(el));\n\n    currentAssignedShiftIntervals = Array.from(new Set(\n      currentAssignedShiftIntervals.sort((a,b) => a-b).map(el => el.valueOf())\n    )).map(el => new Date(el));\n\n    currentClaimedShiftIntervals = Array.from(new Set(\n      currentClaimedShiftIntervals.sort((a,b) => a-b).map(el => el.valueOf())\n    )).map(el => new Date(el));\n\n    // update windows\n    currentAvailabilityWindows = [];\n    for (let i in currentAvailabilityIntervals) {\n      if (i < currentAvailabilityIntervals.length-1) {\n        let start = currentAvailabilityIntervals[i];\n        let end = currentAvailabilityIntervals[Number(i)+1];\n\n        let window = {\n          start,\n          end\n        }\n\n        let priority = 0;\n        console.log(priority);\n\n        for (let e of enumerators) {\n          for (let block of e[AVAILABILITY]) {\n            if (block.startTime <= start && block.endTime >= end) {\n              priority += e.priority;\n            }\n          }\n        }\n        window.priority = priority\n        currentAvailabilityWindows.push(window);\n      }\n    }\n\n    currentAssignedShiftWindows = [];\n    for (let i in currentAssignedShiftIntervals) {\n      if (i < currentAssignedShiftIntervals.length-1) {\n        let start = currentAssignedShiftIntervals[i];\n        let end = currentAssignedShiftIntervals[Number(i)+1];\n\n        let window = {\n          start,\n          end\n        }\n\n        let priority = 0;\n\n        for (let e of enumerators) {\n          for (let block of e[ASSIGNED_SHIFTS]) {\n            if (block.startTime <= start && block.endTime >= end) {\n              priority += e.priority;\n            }\n          }\n        }\n        window.priority = priority\n        currentAssignedShiftWindows.push(window);\n      }\n    }\n\n    currentClaimedShiftWindows = [];\n    for (let i in currentClaimedShiftIntervals) {\n      if (i < currentClaimedShiftIntervals.length-1) {\n        let start = currentClaimedShiftIntervals[i];\n        let end = currentClaimedShiftIntervals[Number(i)+1];\n\n        let window = {\n          start,\n          end\n        }\n\n        let priority = 0;\n\n        for (let e of enumerators) {\n          for (let block of e[CLAIMED_SHIFTS]) {\n            if (block.startTime <= start && block.endTime >= end) {\n              priority += e.priority;\n            }\n          }\n        }\n        window.priority = priority\n        currentClaimedShiftWindows.push(window);\n      }\n    }\n\n\n    stateObj = {\n      currentAssignedShiftIntervals, \n      currentAssignedShiftWindows, \n      currentAvailabilityIntervals, \n      currentAvailabilityWindows, \n      currentClaimedShiftIntervals, \n      currentClaimedShiftWindows, \n      currentDate, \n      enumerators,\n      nextId\n    }\n    console.log(stateObj);\n\n    // Promise only for testing\n    // return new Promise(res => {\n    //   this.setState(stateObj, res);\n    // });\n\n    this.setState(stateObj)\n  }\n\n\n  updateCurrentTimeIntervals = (type, cb) => {\n    let currentDateFormatted = formatDateForDateInput(this.state.currentDate);\n\n    let currentTimeIntervals = {}; // object to update state with\n    currentTimeIntervals[type] = []; // array in object\n\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n\n    console.log(stateObj);\n\n    let enumerators = this.state.enumerators;\n\n    console.log(\"updateCurrentTimeIntervals\", type);\n    for (let enumerator of enumerators) {\n      let times = enumerator[type];\n      for (let time of times) {\n        console.log(time.startTime, time.endTime, time.valid);\n        if (formatDateForDateInput(time.startTime)===currentDateFormatted && time.valid) {\n          currentTimeIntervals[type].push(time.startTime);\n        }\n        if (formatDateForDateInput(time.endTime)===currentDateFormatted && time.valid) {\n          currentTimeIntervals[type].push(time.endTime);\n        }\n      }\n    }\n\n    currentTimeIntervals[type] = this.sortedTimes(currentTimeIntervals[type])\n\n    let currentWindows = [];\n    console.log(currentTimeIntervals[type])\n\n    for (let i in currentTimeIntervals[type]) {\n      if (i>0) {\n        let window = {priority: 0};\n        window.start = currentTimeIntervals[type][i-1];\n        window.end = currentTimeIntervals[type][i];\n        console.log(window.start, window.end);\n        for (let enumerator of enumerators) {\n          for (let block of enumerator[type]) {\n            if (block.startTime<=window.start && block.endTime>=window.end) {\n              console.log(enumerator.priority);\n              window.priority = window.priority + enumerator.priority;\n            }\n          }\n        }\n        console.log(window);\n        currentWindows.push(window);\n      }\n    }\n\n    console.log(currentWindows);\n\n    // Update state timeIntervals with working copy \n    switch (type){\n      case AVAILABILITY:\n        stateObj.currentAvailabilityIntervals = currentTimeIntervals[type]\n        stateObj.currentAvailabilityWindows = currentWindows;\n        break;\n      case ASSIGNED_SHIFTS:\n        stateObj.currentAssignedShiftIntervals = currentTimeIntervals[type];\n        stateObj.currentAssignedShiftWindows = currentWindows;\n        break;\n      case CLAIMED_SHIFTS:\n        stateObj.currentClaimedShiftIntervals = currentTimeIntervals[type];\n        stateObj.currentClaimedShiftWindows = currentWindows;\n        break;\n    }\n\n    this.setState(stateObj, cb);\n  }\n\n  sortedTimes = (dates) => {\n    // declare outarray\n    let sorted = [];\n\n    // sort times\n    sorted = dates.sort((a,b) => a-b);\n\n    // format times\n    sorted = sorted.map(date => date.getTime());\n\n    // remove duplicates\n    function uniqueSorted(arr) {\n      let arrOut = arr;\n      for (let i in arr) {\n        if (i>0) {\n          if (arr[i] == arr[i-1]) {\n            arrOut.splice(i, 1);\n            arrOut = uniqueSorted(arrOut);\n          }\n        }\n      }\n      return arrOut;\n    }\n\n    sorted = uniqueSorted(sorted);\n\n    // Put back into dates\n    return sorted.map(milliseconds => new Date(milliseconds))\n  }\n\n  preserveDateFormat = (stateObj) => {\n    // mutates object - DON'T USE ON STATE ITSELF\n    if (stateObj.currentDate) {\n      stateObj.currentDate = new Date(stateObj.currentDate)\n    }\n\n    stateObj.currentAvailabilityIntervals = stateObj.currentAvailabilityIntervals.map(ds => {\n      return new Date(ds);\n    })\n    stateObj.currentAssignedShiftIntervals = stateObj.currentAssignedShiftIntervals.map(ds => new Date(ds));\n    stateObj.currentClaimedShiftIntervals = stateObj.currentClaimedShiftIntervals.map(ds => new Date(ds));\n\n    if (stateObj.currentAvailabilityWindows) {\n      for (let window of stateObj.currentAvailabilityWindows) {\n        window.start = new Date(window.start);\n        window.end = new Date(window.end);\n      }\n    }\n    if (stateObj.currentAssignedShiftWindows) {\n      for (let window of stateObj.currentAssignedShiftWindows) {\n        window.start = new Date(window.start);\n        window.end = new Date(window.end);\n      }\n    }\n    if (stateObj.currentClaimedShiftWindows) {\n      for (let window of stateObj.currentClaimedShiftWindows) {\n        window.start = new Date(window.start);\n        window.end = new Date(window.end);\n      }\n    }\n\n    let enumerators = stateObj.enumerators;\n    for (let e of enumerators) {\n      let {availability, assignedShifts, claimedShifts} = e;\n      for (let avail of availability) {\n        if (avail.startTime) avail.startTime = new Date(avail.startTime);\n        if (avail.endTime) avail.endTime = new Date(avail.endTime);\n      }\n      for (let as of assignedShifts) {\n        if (as.startTime) as.startTime = new Date(as.startTime);\n        if (as.endTime) as.endTime = new Date(as.endTime);\n      }\n      for (let cs of claimedShifts) {\n        if (cs.startTime) cs.startTime = new Date(cs.startTime);\n        if (cs.endTime) cs.endTime = new Date(cs.endTime);\n      }\n    }\n    return;\n  }\n\n  changeDate = (e) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    let dateValue = new Date(e.target.value);\n    \n    stateObj.currentDate = new Date(dateValue.getTime() + dateValue.getTimezoneOffset()*60*1000)\n\n    return this.updateState(stateObj);\n  }\n\n  addEnumerator = () => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    console.log(\"before assignment\", {stateObj});\n\n    let enumerators = stateObj.enumerators;\n    let newEnumerator = {\n      id: stateObj.nextId,\n      name: '',\n      priority: 1,\n      availability: [],\n      assignedShifts: [],\n      claimedShifts: []\n    }\n    stateObj.nextId++;\n    console.log(\"after assignment\", {stateObj});\n    enumerators.push(newEnumerator);\n\n    return this.updateState(stateObj);\n  }\n\n  deleteEnumerator = (id) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    stateObj.enumerators = stateObj.enumerators.filter((enumerator) => {\n      if (enumerator.id===id) return false;\n      else return true;\n    })\n\n    return this.updateState(stateObj);\n  }\n\n  adjustPriority = (id, increase) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    \n    let foundEnum = stateObj.enumerators.find(enumerator => enumerator.id===id);\n\n    let adjustment = increase ? 1 : -1;\n\n    foundEnum.priority = Math.min(Math.max((foundEnum.priority + adjustment), 0), 9)\n\n    return this.updateState(stateObj);\n  }\n\n  changeEnumeratorName = (id, newName) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    let foundEnum = stateObj.enumerators.find(enumerator => enumerator.id===id);\n    foundEnum.name = newName;\n    console.log({stateObj, id, newName})\n    return this.setState(stateObj)\n  }\n\n  addAvailability = (id) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    let foundEnum = stateObj.enumerators.find(enumerator => enumerator.id===id);\n    let availIds = foundEnum.availability.map(avail => avail.id);\n    if (availIds.length===0) availIds=[-1]\n    let nextId = Math.max(...availIds)+1;\n    console.log(foundEnum, availIds, nextId);\n    foundEnum.availability.push({\n      id: nextId,\n      startTime: this.state.currentDate,\n      endTime: this.state.currentDate\n    })\n\n    return this.updateState(stateObj);\n  }\n\n  addTime = (id, type) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    let foundEnum = stateObj.enumerators.find(enumerator => enumerator.id===id);\n    let availIds = foundEnum[type].map(block => block.id);\n    if (availIds.length===0) availIds=[-1]\n    let nextId = Math.max(...availIds)+1;\n\n    let startTime = new Date(this.state.currentDate)\n    startTime.setHours(8)\n    startTime.setMinutes(0)\n    startTime.setSeconds(0)\n    startTime.setMilliseconds(0);\n\n    let endTime = new Date(this.state.currentDate)\n    endTime.setHours(8)\n    endTime.setMinutes(0)\n    endTime.setSeconds(0)\n    endTime.setMilliseconds(0); \n\n    foundEnum[type].push({\n      id: nextId,\n      startTime,\n      endTime,\n      valid: false\n    })\n\n    return this.updateState(stateObj);\n  }\n\n  deleteTime = (type, enumId, blockId) => {\n\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    let enumerators = stateObj.enumerators;\n\n    let foundEnumerator = enumerators.find((enumerator) => enumerator.id===enumId);\n\n    foundEnumerator[type] = foundEnumerator[type].filter(block => {\n      if (block.id === blockId) return false;\n      else return true;\n    })\n\n    return this.updateState(stateObj);\n  }\n\n  checkValidity = (type, cb) => {\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n    if (type) {\n      this.determineOverlapValidity(stateObj, type);\n      this.determineOrderValidity(stateObj, type);\n    } else {\n      this.determineOverlapValidity(stateObj, AVAILABILITY);\n      this.determineOverlapValidity(stateObj, ASSIGNED_SHIFTS);\n      this.determineOverlapValidity(stateObj, CLAIMED_SHIFTS);\n      this.determineOrderValidity(stateObj, AVAILABILITY);\n      this.determineOrderValidity(stateObj, ASSIGNED_SHIFTS);\n      this.determineOrderValidity(stateObj, CLAIMED_SHIFTS);\n    }\n    this.setState(stateObj, cb);\n  }\n\n\n  determineOverlapValidity = (stateObj, type) => {\n\n    // reset all blocks' validity to true\n    for (let enumerator of stateObj.enumerators) {\n      for (let block of enumerator[type]) { \n        block.valid = true;\n      }\n    }\n\n    // mutates stateObj, don't use on state directly\n    for (let enumerator of stateObj.enumerators) {\n      for (let block of enumerator[type]) {\n        for (let secondBlock of enumerator[type]) {\n          if (block.id === secondBlock.id) continue;\n          else {\n            if (\n              // starts in other block\n              (block.startTime >= secondBlock.startTime && block.startTime <= secondBlock.endTime) || \n              // ends in other block\n              (block.endTime >= secondBlock.startTime && block.endTime <= secondBlock.endTime) || \n              // eclipses other block\n              (block.startTime <= secondBlock.startTime && block.endTime >= secondBlock.endTime)\n            ) {\n              block.valid = false;\n              secondBlock.valid = false;\n            }\n          }\n        }\n      }\n    }\n  }\n\n\n  determineOrderValidity = (stateObj, type) => {\n    // only set false\n    for (let enumerator of stateObj.enumerators) {\n      for (let block of enumerator[type]) {\n        if (block.valid) {\n          if (block.startTime >= block.endTime) block.valid = false;\n        }\n      }\n    }\n  }\n\n\n  modifyTime = (type, startOrEnd, enumId, blockId, newValue) => {\n    console.log({\n      type, startOrEnd, enumId, blockId, newValue\n    })\n    let stateObj = JSON.parse(JSON.stringify(this.state));\n    this.preserveDateFormat(stateObj);\n\n    let foundEnum = stateObj.enumerators.find(enumerator => enumerator.id===enumId);\n    let timeBlock = foundEnum[type].find((t) => t.id===blockId);\n\n    timeBlock[startOrEnd] = new Date(stateObj.currentDate);\n\n    let ampmModifier;\n    newValue.match(\"AM\") ? ampmModifier = 0 : ampmModifier = 12;\n\n    let hours = Number(newValue.slice(0, newValue.indexOf(\":\")));\n\n    if (hours === 12) {\n      hours = 0;\n    }\n\n    hours = hours + ampmModifier;\n\n    let minutes = Number(newValue.slice(newValue.indexOf(\":\")+1, newValue.indexOf(\" \")));\n\n    timeBlock[startOrEnd].setHours(hours, minutes, 0, 0);\n\n    return this.updateState(stateObj);\n  \n  }\n\n\n  render() {\n    let enumKey=0;\n    let enumRows = this.state.enumerators.map((e) => {\n      enumKey++;\n      return (\n        <Enumerator \n          key={`enumerator-${enumKey}`}\n          enumerator={e} \n          currentDate={this.state.currentDate}\n\n          adjustPriority={this.adjustPriority}\n\n          deleteEnumerator={this.deleteEnumerator}\n          changeEnumeratorName={this.changeEnumeratorName}\n\n          deleteTime={this.deleteTime}\n          modifyTime={this.modifyTime}\n          addTime={this.addTime}\n        />\n      )\n    })\n    let availKey=0;\n    let availabilityRows = this.state.currentAvailabilityWindows?.length > 0 ? this.state.currentAvailabilityWindows?.map(win => {\n      availKey++;\n      return(\n        <Row key={`availability-row-${availKey}`}>\n          <Col>\n            {formatDateForTimeInput(new Date(win.start))} - {formatDateForTimeInput(new Date(win.end))}\n          </Col>\n          <Col>\n            {win.priority}\n          </Col>\n        </Row>\n      )\n    }) : [\n      <Row key=\"availability-row-1\">\n        <Col>\n          — - —\n        </Col>\n        <Col>\n          —\n        </Col>\n      </Row>\n    ]\n    let assignedKey = 0;\n    let assignedShiftRows = this.state.currentAssignedShiftWindows?.length > 0 ? this.state.currentAssignedShiftWindows?.map(win => {\n      console.log(win);\n      assignedKey++;\n      return(\n        <Row key={`assigned-row-${assignedKey}`}>\n          <Col>\n            {formatDateForTimeInput(win.start)} - {formatDateForTimeInput(win.end)}\n          </Col>\n          <Col>\n            {win.priority}\n          </Col>\n        </Row>\n      )\n    }) : [\n      <Row key={`assigned-row-${assignedKey}`}>\n        <Col>\n          — - —\n        </Col>\n        <Col>\n          —\n        </Col>\n      </Row>\n    ]\n\n    return (\n      <div className=\"App\">\n        <Modal id=\"help-modal\" show={this.state.showModal} onHide={this.setShowModal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Enumerator Scheduler Help</Modal.Title>\n          </Modal.Header>\n            <Modal.Body>\n              This tool is designed to help you as a Census Field Supervisor consolidate and view the schedules of your enumerators, so that you can better plan your day as to when you will work your shift.<br/><br/>\n\n              You are looking at one day at a time, which can be adjusted by the Select Date input.<br/><br/> \n\n              You can create new enumerators by selecting the 'Add Enumerator' button.<br/><br/>\n              \n              Once you've created an enumerator, enumerators can be deleted at any time by selecting the X in the top right corner of each Enumerator section.<br/><br/>\n\n              You can add times to each enumerator for the selected day that you're looking at, by clicking 'Add Availability', 'Add Assigned Shift', or 'Add Claimed Shift'. Each block of time will default to 8:00 AM - 8:00 AM until changed. If a block is invalid, it will be highlighted red and a warning will appear.<br/><br/>\n\n              You can also adjust each enumerator's priority to indicate whether or not they require more supervision. Each enumerator's score can be from 0 to 9. For example, if you have an enumerator whom you feel requires no supervision, you can put their priority score at 0. However, if you feel that they will need attention and it is important that you stay in contact with them on their shift, then you can give them a higher priority score.<br/><br/>\n\n              At the bottom of the page are the bars that indicate all of the time blocks for the day, both for availability, and for assigned shifts. The Availability bar corresponds to all of your enumerators' availability, and the Assigned Shifts bar corresponds to all of your enumerators' assigned shifts. Each block is color coded to indicate how busy a block of time is, with gray indicating less busy and blue indicating more busy. For example, if from 1pm to 3pm, you have only one enumerator with availability and that enumerator has a priority score of 1, but from 3pm to 5pm you have 3 enumerators with availability and their priority scores are higher, then the Availability bar would be gray for 1-3 and blue for 3-5. Hovering the mouse over any section of the bar will indicate what the times of that block are and what the priority is.<br/><br/>\n\n              Good luck!\n\n            </Modal.Body>\n            <Modal.Footer className=\"justify-content-center\">\n              <button onClick={this.setShowModal}>\n                Finished\n              </button>\n            </Modal.Footer>\n\n        </Modal>\n        <Navbar className=\"nav\">\n          <div className=\"mx-auto\">\n            Enumerator Time Viewer    \n          </div>\n          <div\n            className=\"float-sm-right help-modal-question-mark\"\n            onClick={this.setShowModal}\n          >\n            ?\n          </div>\n        </Navbar>\n        <Container fluid className=\"enumerator-master-container\">\n          <datalist id=\"times\">\n            <option value=\"9:00 AM\" />\n            <option value=\"9:15 AM\" />\n            <option value=\"9:30 AM\" />\n            <option value=\"9:45 AM\" />\n            <option value=\"10:00 AM\" />\n            <option value=\"10:15 AM\" />\n            <option value=\"10:30 AM\" />\n            <option value=\"10:45 AM\" />\n            <option value=\"11:00 AM\" />\n            <option value=\"11:15 AM\" />\n            <option value=\"11:30 AM\" />\n            <option value=\"11:45 AM\" />\n            <option value=\"12:00 PM\" />\n            <option value=\"12:15 PM\" />\n            <option value=\"12:30 PM\" />\n            <option value=\"12:45 PM\" />\n            <option value=\"1:00 PM\" />\n            <option value=\"1:15 PM\" />\n            <option value=\"1:30 PM\" />\n            <option value=\"1:45 PM\" />\n            <option value=\"2:00 PM\" />\n            <option value=\"2:15 PM\" />\n            <option value=\"2:30 PM\" />\n            <option value=\"2:45 PM\" />\n            <option value=\"3:00 PM\" />\n            <option value=\"3:15 PM\" />\n            <option value=\"3:30 PM\" />\n            <option value=\"3:45 PM\" />\n            <option value=\"4:00 PM\" />\n            <option value=\"4:15 PM\" />\n            <option value=\"4:30 PM\" />\n            <option value=\"4:45 PM\" />\n            <option value=\"5:00 PM\" />\n            <option value=\"5:15 PM\" />\n            <option value=\"5:30 PM\" />\n            <option value=\"5:45 PM\" />\n            <option value=\"6:00 PM\" />\n            <option value=\"6:15 PM\" />\n            <option value=\"6:30 PM\" />\n            <option value=\"6:45 PM\" />\n            <option value=\"6:00 PM\" />\n            <option value=\"7:15 PM\" />\n            <option value=\"7:30 PM\" />\n            <option value=\"7:45 PM\" />\n            <option value=\"7:00 PM\" />\n            <option value=\"8:15 PM\" />\n            <option value=\"8:30 PM\" />\n            <option value=\"8:45 PM\" />\n            <option value=\"9:00 PM\" />\n          </datalist>\n          <Row className=\"justify-content-center p-2\">\n            <h5 className=\"m-2\">\n              Select Date:\n            </h5>\n            <input \n              type=\"date\" \n              value={formatDateForDateInput(this.state.currentDate)} \n              onChange={this.changeDate} \n              className=\"m-2\"\n            />\n          </Row>\n          <Row className=\"justify-content-center p-2\">\n            <button id=\"add-enumerator-button\" onClick={this.addEnumerator}>\n              Add Enumerator\n            </button>\n          </Row>\n          {enumRows}\n        </Container>\n        <Container fluid id=\"time-display\">\n          <h5>Availability</h5>\n          <PriorityBlocks currentWindows={this.state.currentAvailabilityWindows}/>\n          <h5>Assigned Shifts</h5>\n          <PriorityBlocks currentWindows={this.state.currentAssignedShiftWindows}/>\n        </Container>\n      </div>\n    );\n  }\n}\n\nfunction Enumerator(props) {\n\n  let currentDate = props.currentDate;\n\n  let { id, name, priority, availability, assignedShifts, claimedShifts } = props.enumerator;\n\n  let currentYear = currentDate.getUTCFullYear();\n  let currentMonth = currentDate.getUTCMonth();\n  let currentDay = currentDate.getUTCDate();\n  \n  availability = availability.filter((block) => {\n    let startDateFormatted = formatDateForDateInput(block.startTime);\n    let endDateFormatted = formatDateForDateInput(block.endTime);\n    let currentDateFormatted = formatDateForDateInput(currentDate);\n\n    if (startDateFormatted === endDateFormatted && endDateFormatted === currentDateFormatted) {\n      return true;\n    } else return false;\n  });\n\n  assignedShifts = assignedShifts.filter((block) => {\n    let startDateFormatted = formatDateForDateInput(block.startTime);\n    let endDateFormatted = formatDateForDateInput(block.endTime);\n    let currentDateFormatted = formatDateForDateInput(currentDate);\n\n    if (startDateFormatted === endDateFormatted && endDateFormatted === currentDateFormatted) {\n      return true;\n    } else return false;\n  });\n\n\n  claimedShifts = claimedShifts.filter((block) => {\n    let startDateFormatted = formatDateForDateInput(block.startTime);\n    let endDateFormatted = formatDateForDateInput(block.endTime);\n    let currentDateFormatted = formatDateForDateInput(currentDate);\n\n    if (startDateFormatted === endDateFormatted && endDateFormatted === currentDateFormatted) {\n      return true;\n    } else return false;\n  })\n\n  let renderedClaimedShifts = claimedShifts.map(block => <Block type={CLAIMED_SHIFTS} block={block} modifyTime={props.modifyTime} deleteTime={props.deleteTime} id={id}/>)\n\n  let renderedAssignedShifts = assignedShifts.map(block => <Block type={ASSIGNED_SHIFTS} block={block} modifyTime={props.modifyTime} deleteTime={props.deleteTime} id={id}/>)\n\n  let renderedAvailability = availability.map(block => <Block type={AVAILABILITY} block={block} modifyTime={props.modifyTime} deleteTime={props.deleteTime} id={id}/>)\n  \n  return (\n    <Container className=\"enumerator-container\" key={id} >\n      <Row className=\"enumerator-row enumerator-name-row p-1\">\n        <input \n          value={name}\n          className=\"enumerator-name\"\n          placeholder=\"Enumerator Name\"\n          onChange={(e) => {\n            props.changeEnumeratorName(id, e.target.value)\n          }}\n        />\n        <Col>\n          <span style={{\"marginRight\": \"10px\"}}>\n            Priority:\n          </span>\n          <span \n            className=\"adjust-priority adjust-priority-down\"\n            onClick={()=>{props.adjustPriority(id, false)}}\n          >\n            &#9660;\n          </span>\n            {priority}\n          <span \n            className=\"adjust-priority adjust-priority-up\"\n            onClick={()=>{props.adjustPriority(id, true)}}\n          >\n            &#9650;\n          </span>\n        </Col>\n        <Col>\n          <span \n            className=\"delete-enumerator-icon\"\n            onClick={(e)=>{props.deleteEnumerator(id)}}\n          >\n            &times;\n          </span>\n        </Col>\n      </Row>\n      <Row>\n        <EnumeratorCol \n          blocks={availability} \n          header=\"Availability\" \n          type={AVAILABILITY} \n          addTime={props.addTime} \n          modifyTime={props.modifyTime} \n          deleteTime={props.deleteTime} \n          enumeratorId={id}\n        />      \n        <EnumeratorCol \n          blocks={assignedShifts} \n          header=\"Assigned Shifts\" \n          type={ASSIGNED_SHIFTS} \n          addTime={props.addTime} \n          modifyTime={props.modifyTime} \n          deleteTime={props.deleteTime} \n          enumeratorId={id}\n        />  \n        <EnumeratorCol \n          blocks={claimedShifts} \n          header=\"Claimed Shifts\" \n          type={CLAIMED_SHIFTS} \n          addTime={props.addTime} \n          modifyTime={props.modifyTime} \n          deleteTime={props.deleteTime} \n          enumeratorId={id}\n        />\n      </Row>  \n    </Container>\n  )\n}\n\n\nfunction Block(props) {\n  let {type, block, modifyTime, deleteTime, id} = props;\n  let startOptions = TIMES.map(time => {\n    let selected = false;\n    if (formatDateForTimeInput(block.startTime) == time) {\n      selected = true;\n    }\n    return <option key={time} value={time} selected={selected}>{time}</option>\n  })\n\n  let endOptions = TIMES.map(time => {\n    let selected = false;\n    if (formatDateForTimeInput(block.endTime) == time) {\n      selected = true;\n    }\n    return <option key={time} value={time} selected={selected}>{time}</option>\n  })\n\n  const [warning, setWarning] = useState(false);\n\n  return (\n    <Container key={block.id} \n      className=\"rendered-time-block\"\n      onMouseEnter={(e)=>{if(!block.valid) setWarning(true);}}\n      onMouseLeave={(e)=>{setWarning(false);}}\n    >\n      <Row className=\"time-block-row justify-content-center\">\n        <select\n          as=\"Col\"\n          list=\"times\"\n          key={`availability-${block.id}-start`}\n          className={`time-input m-2 ${block.valid ? \"\" : \"time-input-invalid\"}`}\n          onChange={(e) => {\n            modifyTime(type, START_TIME, id, block.id, e.target.value)\n          }}\n        >\n          {startOptions}\n        </select>\n        <div className=\"time-block-to-div\">\n          to\n        </div>\n        <select\n          as=\"Col\"\n          list=\"times\"\n          key={`availability-${block.id}-end`}\n          className={`time-input m-2 ${block.valid ? \"\" : \"time-input-invalid\"}`}\n          onChange={(e)=>{\n            modifyTime(type, END_TIME, id, block.id, e.target.value)\n          }}\n        >\n          {endOptions}\n        </select>\n        <button\n          as=\"Col\"\n          className=\"close m-1\"\n          onClick={()=>{deleteTime(type, id, block.id)}}\n        >\n          &times;\n        </button>\n      </Row>\n    </Container>\n  )\n}\n\n\n\nclass PriorityBlocks extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      detail: \"\"\n    }\n  }\n\n  render() {\n    let maxScore = Math.max(...this.props.currentWindows.map(cw => cw.priority))\n    let minTimeIndex = Math.min(...this.props.currentWindows.map(cw => TIMES.indexOf(formatDateForTimeInput(cw.start))));\n    let maxTimeIndex = Math.max(...this.props.currentWindows.map(cw => TIMES.indexOf(formatDateForTimeInput(cw.end))));\n    const GRAY = [226, 226, 226]\n    const LIGHTBLUE = [173, 216, 230]\n    let detail = \"\";\n    let blocks = this.props.currentWindows.map(cw => {\n\n      let start = formatDateForTimeInput(cw.start)\n      let end = formatDateForTimeInput(cw.end);\n  \n      let compColor = [];\n      for (let i=0; i<3; i++) {\n        compColor.push(GRAY[i] - ((cw.priority/maxScore) * (GRAY[i]-LIGHTBLUE[i])))\n      }\n  \n      console.log(TIMES, cw);\n      console.log(TIMES.indexOf(end), TIMES.indexOf(start), maxTimeIndex, minTimeIndex)\n      console.log((TIMES.indexOf(end)-TIMES.indexOf(start)) * 100 / (maxTimeIndex-minTimeIndex))\n  \n      return (\n        <div \n          className=\"priority-block\"\n          style={{\n            height: '45px',\n            width: `${(TIMES.indexOf(end)-TIMES.indexOf(start)) * 100 / (maxTimeIndex-minTimeIndex)}%`,\n            backgroundColor: `rgb(${compColor[0]}, ${compColor[1]}, ${compColor[2]})`,\n            \n          }}\n          onMouseEnter={() => {\n            this.setState({\n              detail : `${start} - ${end}, Priority: ${cw.priority}`\n            })\n          }}\n          onMouseLeave={()=>{this.setState({detail : \"\"})}}\n      >\n        <div className=\"priority-circle\">\n          {cw.priority}\n        </div>\n      </div>\n      )\n    })\n\n    return (\n      <div>\n        <Row className=\"priority-blocks-row\">\n          {blocks}\n        </Row>\n        <Row className=\"hover-display-area\">\n          {this.state.detail}\n        </Row>\n      </div>\n    );\n  }\n}\n\n// functional component for displaying color gradient\nfunction ColorDisplay(props) {\n  var gray = [226, 226, 226]\n  var lightblue = [173, 216, 230]\n  const BLOCK_COUNT = 15;\n  let count = 0;\n  let blocks = [];\n  while (count < BLOCK_COUNT) {\n\n    let compColor = [];\n\n    for (let i=0; i<3; i++) {\n      compColor.push(gray[i] - ((count/BLOCK_COUNT) * (gray[i]-lightblue[i])))\n    }\n\n    let style = {\n      width: `${100/BLOCK_COUNT}%`,\n      height: '15px',\n      backgroundColor: `rgb(${compColor[0]}, ${compColor[1]}, ${compColor[2]})`\n    }\n\n    blocks.push(<div style={style}></div>)\n    count++;\n  }\n  return (\n    <Row>\n      {blocks}\n    </Row>\n  )\n}\n\n\nfunction EnumeratorCol(props) {\n  let renderedBlocks = props.blocks.map(block => <Block type={props.type} block={block} modifyTime={props.modifyTime} deleteTime={props.deleteTime} id={props.enumeratorId}>\n  </Block>)\n\n  console.log(props);\n  let warning = null;\n\n  if (!props.blocks.every(block => block.valid)) {\n    warning = <Row className=\"warning xs-12\">\n      <span className=\"warning-span\">\n        Make sure that the end time is later than the start time, and that this time window does not overlap any other windows.\n      </span>\n    </Row>\n  }\n\n  return (\n    <Col className=\"enumerator-col enumeartor-availability-col\" sm={6} md={4}>\n      <Row className=\"justify-content-center\">\n        <h6>\n          {props.header}\n        </h6>\n      </Row>\n      <Row className=\"justify-content-center\">\n        {renderedBlocks}\n      </Row>\n      {warning}\n      <Row className=\"justify-content-center\">\n        <button onClick={() => {\n          console.log(props.enumeratorId);\n          props.addTime(props.enumeratorId, props.type);\n        }}>\n          Add {props.header[props.header.length-1] === \"s\" ? props.header.slice(0, props.header.length-1) : props.header}\n        </button>\n      </Row>\n    </Col>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}